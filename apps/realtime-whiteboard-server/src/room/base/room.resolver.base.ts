/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Room } from "./Room";
import { RoomCountArgs } from "./RoomCountArgs";
import { RoomFindManyArgs } from "./RoomFindManyArgs";
import { RoomFindUniqueArgs } from "./RoomFindUniqueArgs";
import { CreateRoomArgs } from "./CreateRoomArgs";
import { UpdateRoomArgs } from "./UpdateRoomArgs";
import { DeleteRoomArgs } from "./DeleteRoomArgs";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { ParticipantFindManyArgs } from "../../participant/base/ParticipantFindManyArgs";
import { Participant } from "../../participant/base/Participant";
import { Board } from "../../board/base/Board";
import { RoomService } from "../room.service";
@graphql.Resolver(() => Room)
export class RoomResolverBase {
  constructor(protected readonly service: RoomService) {}

  async _roomsMeta(
    @graphql.Args() args: RoomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Room])
  async rooms(@graphql.Args() args: RoomFindManyArgs): Promise<Room[]> {
    return this.service.rooms(args);
  }

  @graphql.Query(() => Room, { nullable: true })
  async room(@graphql.Args() args: RoomFindUniqueArgs): Promise<Room | null> {
    const result = await this.service.room(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Room)
  async createRoom(@graphql.Args() args: CreateRoomArgs): Promise<Room> {
    return await this.service.createRoom({
      ...args,
      data: {
        ...args.data,

        board: args.data.board
          ? {
              connect: args.data.board,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Room)
  async updateRoom(@graphql.Args() args: UpdateRoomArgs): Promise<Room | null> {
    try {
      return await this.service.updateRoom({
        ...args,
        data: {
          ...args.data,

          board: args.data.board
            ? {
                connect: args.data.board,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Room)
  async deleteRoom(@graphql.Args() args: DeleteRoomArgs): Promise<Room | null> {
    try {
      return await this.service.deleteRoom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Message], { name: "messages" })
  async findMessages(
    @graphql.Parent() parent: Room,
    @graphql.Args() args: MessageFindManyArgs
  ): Promise<Message[]> {
    const results = await this.service.findMessages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Participant], { name: "participants" })
  async findParticipants(
    @graphql.Parent() parent: Room,
    @graphql.Args() args: ParticipantFindManyArgs
  ): Promise<Participant[]> {
    const results = await this.service.findParticipants(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Board, {
    nullable: true,
    name: "board",
  })
  async getBoard(@graphql.Parent() parent: Room): Promise<Board | null> {
    const result = await this.service.getBoard(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
